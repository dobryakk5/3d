# diagnostic.py
# –ü—Ä–æ–≤–µ—Ä–∏–º –ß–¢–û –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å

from PIL import Image
import numpy as np

def diagnose_floor_plan(image_path):
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ floor plan –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    """
    img = Image.open(image_path)
    arr = np.array(img)
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ floor plan:")
    print(f"   –†–∞–∑–º–µ—Ä: {img.size}")
    print(f"   –†–µ–∂–∏–º: {img.mode}")
    print(f"   –§–æ—Ä–º–∞—Ç: {img.format}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¶–≤–µ—Ç–Ω–æ–π –∏–ª–∏ —á/–±?
    if len(arr.shape) == 3:
        print(f"   –ö–∞–Ω–∞–ª—ã: {arr.shape[2]} (RGB)")
    else:
        print(f"   –ö–∞–Ω–∞–ª—ã: 1 (Grayscale)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
    if len(arr.shape) == 3:
        gray = np.mean(arr, axis=2)
    else:
        gray = arr
    
    contrast = gray.std()
    print(f"   –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: {contrast:.1f}")
    
    if contrast < 30:
        print("   ‚ö†Ô∏è  –ù–ò–ó–ö–ê–Ø –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å - –ø–ª–æ—Ö–æ –¥–ª—è CV")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if img.size[0] < 512 or img.size[1] < 512:
        print("   ‚ö†Ô∏è  –ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ - upscale –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –¢–µ–∫—Å—Ç –Ω–∞ —á–µ—Ä—Ç–µ–∂–µ
    text_density = detect_text_density(arr)
    print(f"   –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {text_density:.1f}%")
    
    if text_density > 20:
        print("   ‚ö†Ô∏è  –ú–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –Ω—É–∂–µ–Ω OCR + –æ—á–∏—Å—Ç–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –°–ª–æ–∂–Ω–æ—Å—Ç—å
    edge_density = detect_edge_density(arr)
    print(f"   –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π: {edge_density:.1f}%")
    
    if edge_density > 40:
        print("   ‚ö†Ô∏è  –û—á–µ–Ω—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —á–µ—Ä—Ç–µ–∂ - —Å–ª–æ–∂–Ω–æ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –Ω–∞ –≤–∞—à–µ–º floor plan
diagnose_floor_plan('floor_plan.jpg')