# cubicasa_vectorize.py
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è floor plan ‚Üí SVG

import torch
import cv2
import numpy as np
from PIL import Image
import svgwrite
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ CubiCasa
from floortrans.models import get_model
from floortrans.post_prosessing import split_prediction, get_polygons

class FloorPlanVectorizer:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è floor plans —Å –ø–æ–º–æ—â—å—é ML
    """
    
    def __init__(self, model_path='model_best_val_loss_var.pkl'):
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ CubiCasa...")

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
        self.device = torch.device('mps' if torch.backends.mps.is_available() else 'cpu')

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å checkpoint
        checkpoint = torch.load(model_path, map_location=self.device)

        # –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–∞—Å—Å–æ–≤
        n_classes = 44  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –≤ checkpoint
        self.model = get_model('hg_furukawa_original', 51)
        self.model.conv4_ = torch.nn.Conv2d(256, n_classes, bias=True, kernel_size=1)
        self.model.upsample = torch.nn.ConvTranspose2d(n_classes, n_classes, kernel_size=4, stride=4)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Å–∞
        self.model.load_state_dict(checkpoint['model_state'])
        self.model.eval()
        self.model.to(self.device)

        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ {self.device}")
    
    def vectorize(self, image_path, output_svg='output.svg', output_dxf='output.dxf'):
        """
        –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ—Ç floor plan
        
        Returns:
            dict: {
                'walls': [...],      # –°–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω (–ª–∏–Ω–∏–∏)
                'doors': [...],      # –°–ø–∏—Å–æ–∫ –¥–≤–µ—Ä–µ–π
                'windows': [...],    # –°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω
                'rooms': [...]       # –ü–æ–ª–∏–≥–æ–Ω—ã –∫–æ–º–Ω–∞—Ç
            }
        """
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {image_path}")
        
        # 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(image_path).convert('RGB')
        img_size = 512  # –†–∞–∑–º–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏
        image_resized = image.resize((img_size, img_size))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–Ω–∑–æ—Ä
        img_array = np.array(image_resized).transpose((2, 0, 1))
        img_tensor = torch.FloatTensor(img_array).unsqueeze(0) / 255.0
        img_tensor = img_tensor.to(self.device)
        
        # 2. –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏
        print("ü§ñ –ó–∞–ø—É—Å–∫ ML-–º–æ–¥–µ–ª–∏...")
        with torch.no_grad():
            predictions = self.model(img_tensor)

        # 3. –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–µ–Ω, –¥–≤–µ—Ä–µ–π, –æ–∫–æ–Ω...")
        split = [21, 12, 11]
        predictions = predictions.cpu()  # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ CPU –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        heatmaps, rooms, icons = split_prediction(predictions, (img_size, img_size), split)

        all_opening_types = [1, 2]  # Window, Door
        polygons, types, room_polygons, room_types = get_polygons(
            (heatmaps, rooms, icons), 0.4, all_opening_types)

        result = {
            'polygons': polygons,
            'types': types,
            'room_polygons': room_polygons,
            'room_types': room_types,
            'heatmaps': heatmaps,
            'rooms': rooms,
            'icons': icons
        }


        # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        vectors = self._process_results(result, image.size)
        
        # 5. –≠–∫—Å–ø–æ—Ä—Ç –≤ SVG
        self._export_svg(vectors, output_svg, image.size)
        
        # 6. –≠–∫—Å–ø–æ—Ä—Ç –≤ DXF (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self._export_dxf(vectors, output_dxf)
        
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ!")
        print(f"   SVG: {output_svg}")
        print(f"   DXF: {output_dxf}")
        
        return vectors
    
    def _process_results(self, result, original_size):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ –≤ –≤–µ–∫—Ç–æ—Ä—ã
        """
        vectors = {
            'walls': [],
            'doors': [],
            'windows': [],
            'rooms': []
        }

        # –ú–∞—Å—à—Ç–∞–± –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        scale_x = original_size[0] / 512
        scale_y = original_size[1] / 512

        polygons = result['polygons']
        types = result['types']
        room_polygons = result['room_polygons']
        room_types = result['room_types']

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–µ–Ω—ã, –¥–≤–µ—Ä–∏, –æ–∫–Ω–∞
        for i, pol in enumerate(polygons):
            pol_type = types[i]
            scaled_pol = [(x * scale_x, y * scale_y) for y, x in pol]

            if pol_type['type'] == 'wall':
                vectors['walls'].append(scaled_pol)
            elif pol_type['type'] == 'icon':
                icon_class = pol_type['class']
                if icon_class == 1:  # Window
                    vectors['windows'].append(scaled_pol)
                elif icon_class == 2:  # Door
                    vectors['doors'].append(scaled_pol)

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã
        for i, room_pol in enumerate(room_polygons):
            if hasattr(room_pol, 'exterior'):
                # Shapely Polygon
                coords = list(room_pol.exterior.coords)
                scaled_coords = [(x * scale_x, y * scale_y) for x, y in coords]
                vectors['rooms'].append(scaled_coords)

        return vectors
    
    def _extract_lines(self, mask):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–∏–Ω–∏–∏ –∏–∑ binary mask —Å –ø–æ–º–æ—â—å—é HoughLinesP
        """
        # –°–∫–µ–ª–µ—Ç–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–Ω–∫–∏—Ö –ª–∏–Ω–∏–π
        skeleton = cv2.ximgproc.thinning(mask.astype(np.uint8) * 255)
        
        # Hough Line Transform
        lines = cv2.HoughLinesP(
            skeleton,
            rho=1,
            theta=np.pi/180,
            threshold=50,
            minLineLength=20,
            maxLineGap=5
        )
        
        if lines is None:
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç [(x1,y1), (x2,y2)]
        return [
            ((line[0][0], line[0][1]), (line[0][2], line[0][3]))
            for line in lines
        ]
    
    def _extract_rectangles(self, mask):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ (–¥–≤–µ—Ä–∏, –æ–∫–Ω–∞)
        """
        contours, _ = cv2.findContours(
            mask.astype(np.uint8) * 255,
            cv2.RETR_EXTERNAL,
            cv2.CHAIN_APPROX_SIMPLE
        )
        
        rectangles = []
        for cnt in contours:
            # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—É—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
            rect = cv2.minAreaRect(cnt)
            box = cv2.boxPoints(rect)
            rectangles.append(box)
        
        return rectangles
    
    def _extract_contours(self, mask):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç—É—Ä—ã –∫–æ–º–Ω–∞—Ç
        """
        contours, _ = cv2.findContours(
            mask.astype(np.uint8) * 255,
            cv2.RETR_EXTERNAL,
            cv2.CHAIN_APPROX_SIMPLE
        )
        
        return [cnt.squeeze() for cnt in contours if len(cnt) > 2]
    
    def _scale_line(self, line, scale_x, scale_y):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –ª–∏–Ω–∏—é"""
        (x1, y1), (x2, y2) = line
        return (
            (x1 * scale_x, y1 * scale_y),
            (x2 * scale_x, y2 * scale_y)
        )
    
    def _scale_rect(self, rect, scale_x, scale_y):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"""
        return [(x * scale_x, y * scale_y) for (x, y) in rect]
    
    def _scale_contour(self, contour, scale_x, scale_y):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—É—Ä"""
        return [(x * scale_x, y * scale_y) for (x, y) in contour]
    
    def _export_svg(self, vectors, output_path, size):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä—ã –≤ SVG
        """
        dwg = svgwrite.Drawing(output_path, size=size)

        # –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–Ω—ã (—á–µ—Ä–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã)
        wall_group = dwg.g(id='walls', fill='black', fill_opacity=0.8)
        for wall_pol in vectors['walls']:
            if len(wall_pol) > 0:
                dwg.add(dwg.polygon(points=wall_pol))
        dwg.add(wall_group)
        
        # –î–æ–±–∞–≤–∏—Ç—å –¥–≤–µ—Ä–∏ (—Å–∏–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
        door_group = dwg.g(id='doors', fill='blue', fill_opacity=0.3)
        for rect in vectors['doors']:
            points = [(x, y) for (x, y) in rect]
            door_group.add(dwg.polygon(points=points))
        dwg.add(door_group)
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ–∫–Ω–∞ (–≥–æ–ª—É–±—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
        window_group = dwg.g(id='windows', fill='cyan', fill_opacity=0.3)
        for rect in vectors['windows']:
            points = [(x, y) for (x, y) in rect]
            window_group.add(dwg.polygon(points=points))
        dwg.add(window_group)
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã)
        room_group = dwg.g(id='rooms', fill='lightgray', fill_opacity=0.2, stroke='gray')
        for contour in vectors['rooms']:
            points = [(x, y) for (x, y) in contour]
            room_group.add(dwg.polygon(points=points))
        dwg.add(room_group)
        
        dwg.save()
    
    def _export_dxf(self, vectors, output_path):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä—ã –≤ DXF
        """
        try:
            import ezdxf
        except ImportError:
            print("‚ö†Ô∏è  ezdxf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é DXF —ç–∫—Å–ø–æ—Ä—Ç")
            return
        
        # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π DXF –¥–æ–∫—É–º–µ–Ω—Ç
        doc = ezdxf.new('R2010')
        msp = doc.modelspace()
        
        # –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–Ω—ã –Ω–∞ —Å–ª–æ–π "WALLS"
        doc.layers.new(name='WALLS', dxfattribs={'color': 7})
        for (x1, y1), (x2, y2) in vectors['walls']:
            msp.add_line((x1, y1), (x2, y2), dxfattribs={'layer': 'WALLS'})
        
        # –î–æ–±–∞–≤–∏—Ç—å –¥–≤–µ—Ä–∏ –Ω–∞ —Å–ª–æ–π "DOORS"
        doc.layers.new(name='DOORS', dxfattribs={'color': 5})
        for rect in vectors['doors']:
            points = [(x, y, 0) for (x, y) in rect]
            msp.add_lwpolyline(points, dxfattribs={'layer': 'DOORS'})
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ–∫–Ω–∞ –Ω–∞ —Å–ª–æ–π "WINDOWS"
        doc.layers.new(name='WINDOWS', dxfattribs={'color': 4})
        for rect in vectors['windows']:
            points = [(x, y, 0) for (x, y) in rect]
            msp.add_lwpolyline(points, dxfattribs={'layer': 'WINDOWS'})
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        doc.saveas(output_path)


# ============================================
# –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï
# ============================================

if __name__ == "__main__":
    # –°–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–∞–π–∑–µ—Ä
    vectorizer = FloorPlanVectorizer(model_path='model_best_val_loss_var.pkl')
    
    # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å floor plan
    result = vectorizer.vectorize(
        image_path='floor_plan.jpg',
        output_svg='floor_plan.svg',
        output_dxf='floor_plan.dxf'
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –°—Ç–µ–Ω: {len(result['walls'])}")
    print(f"   –î–≤–µ—Ä–µ–π: {len(result['doors'])}")
    print(f"   –û–∫–æ–Ω: {len(result['windows'])}")
    print(f"   –ö–æ–º–Ω–∞—Ç: {len(result['rooms'])}")