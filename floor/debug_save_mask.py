#!/usr/bin/env python3
"""
Debug script to save the actual mask generated by detect_hatching_enhanced_fixed
"""
import cv2
import numpy as np
from PIL import Image, ImageEnhance
import sys
sys.path.append('floortrans')

# Copy the detection function and parameters
KERNEL_SIZES = [35]
DENSITY_THRESHOLDS = [0.32]

# Execute import from export_objects
with open('export_objects.py', 'r') as f:
    code = f.read()
    # Extract just the function definitions, not the main()
    code_parts = code.split('if __name__')
    exec(code_parts[0])

# Load and preprocess image
img_orig = Image.open('plan_floor1.jpg').convert('RGB')
orig_width, orig_height = img_orig.size

max_size = 2048
w, h = orig_width, orig_height
if max(w, h) > max_size:
    scale = max_size / max(w, h)
    img = img_orig.resize((int(w * scale), int(h * scale)), Image.LANCZOS)
else:
    img = img_orig
    scale = 1.0

enhancer = ImageEnhance.Contrast(img)
img = enhancer.enhance(1.2)
img_np = np.array(img)

print(f"Image size: {img_np.shape[1]}x{img_np.shape[0]}")
print(f"Scale: {scale:.4f}")
print(f"\nUsing parameters:")
print(f"  KERNEL_SIZES = {KERNEL_SIZES}")
print(f"  DENSITY_THRESHOLDS = {DENSITY_THRESHOLDS}")
print(f"  MIN_AREA = {MIN_AREA}")

# Detect with current settings from export_objects.py
wall_mask = detect_hatching_enhanced_fixed(img_np)

print(f"\nMask info:")
print(f"  Shape: {wall_mask.shape}")
print(f"  White pixels: {np.sum(wall_mask > 0)}")
print(f"  Values: min={wall_mask.min()}, max={wall_mask.max()}")

# Save the mask
cv2.imwrite('debug_export_mask.png', wall_mask)
print(f"\nSaved mask to: debug_export_mask.png")

# Try to extract contours with both methods
contours_ext, _ = cv2.findContours(wall_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
contours_list, _ = cv2.findContours(wall_mask, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

print(f"\nContours found:")
print(f"  RETR_EXTERNAL: {len(contours_ext)}")
print(f"  RETR_LIST: {len(contours_list)}")

if contours_list:
    areas = [cv2.contourArea(c) for c in contours_list]
    areas_sorted = sorted(areas, reverse=True)
    print(f"\n  Top 20 areas (RETR_LIST): {areas_sorted[:20]}")
    print(f"  Contours with area > 100: {sum(1 for a in areas if a > 100)}")
