#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å—Ç–µ–Ω –ë–ï–ó Blender - —á–∏—Ç–∞–µ—Ç JSON –Ω–∞–ø—Ä—è–º—É—é
"""

import json
import sys

SCALE_FACTOR = 0.01

# –û–±–ª–∞—Å—Ç—å window_1 (–ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è 0.01)
WINDOW1_X_MIN = 0.0
WINDOW1_X_MAX = 3.2
WINDOW1_Y_MIN = 9.8
WINDOW1_Y_MAX = 10.4

def load_json(path):
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)

def analyze_json_structure(json_path):
    print("=" * 70)
    print("–ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ JSON –î–õ–Ø WINDOW_1")
    print("=" * 70)

    data = load_json(json_path)

    # –ù–∞–π–¥–µ–º window_1
    window_1 = None
    for opening in data.get('openings', []):
        if opening.get('id') == 'window_1':
            window_1 = opening
            break

    if not window_1:
        print("‚ùå window_1 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ openings!")
        return

    print(f"\n‚úì window_1 –Ω–∞–π–¥–µ–Ω:")
    bbox = window_1.get('bbox', {})
    print(f"  –¢–∏–ø: {window_1.get('type')}")
    print(f"  Bbox (–ø–∏–∫—Å–µ–ª–∏): x={bbox.get('x')}, y={bbox.get('y')}, width={bbox.get('width')}, height={bbox.get('height')}")
    print(f"  Bbox (–º–µ—Ç—Ä—ã): x={bbox.get('x')*SCALE_FACTOR:.3f}, y={bbox.get('y')*SCALE_FACTOR:.3f}, width={bbox.get('width')*SCALE_FACTOR:.3f}, height={bbox.get('height')*SCALE_FACTOR:.3f}")

    # –ù–∞–π–¥–µ–º —Å—Ç–µ–Ω–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è window_1
    print(f"\nüîç –°–µ–≥–º–µ–Ω—Ç—ã —Å—Ç–µ–Ω –¥–ª—è window_1:")

    window_1_segments = []
    for seg in data.get('wall_segments_from_openings', []):
        if seg.get('opening_id') == 'window_1':
            window_1_segments.append(seg)

    print(f"  –ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(window_1_segments)}")

    for seg in window_1_segments:
        seg_bbox = seg.get('bbox', {})
        print(f"\n    {seg.get('segment_id')}")
        print(f"      Edge: {seg.get('edge_side')}")
        print(f"      Junctions: {seg.get('start_junction_id')} ‚Üí {seg.get('end_junction_id')}")
        print(f"      Bbox (px): x={seg_bbox.get('x')}, y={seg_bbox.get('y')}, w={seg_bbox.get('width')}, h={seg_bbox.get('height')}")
        print(f"      Bbox (m): x={seg_bbox.get('x')*SCALE_FACTOR:.3f}, y={seg_bbox.get('y')*SCALE_FACTOR:.3f}, w={seg_bbox.get('width')*SCALE_FACTOR:.3f}, h={seg_bbox.get('height')*SCALE_FACTOR:.3f}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ —É–≥–ª–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã (corners) –µ—Å—Ç—å –≤ –æ–±–ª–∞—Å—Ç–∏ window_1
    print(f"\nüîç –£–≥–ª–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã (corners) –≤ –æ–±–ª–∞—Å—Ç–∏ window_1:")

    outline = data.get('building_outline', {})
    if not outline:
        print("  ‚ùå building_outline –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    vertices = outline.get('vertices', [])
    corner_vertices = [v for v in vertices if v.get('corner', 0) == 1]

    print(f"  –í—Å–µ–≥–æ —É–≥–ª–æ–≤—ã—Ö –≤–µ—Ä—à–∏–Ω –≤ –∫–æ–Ω—Ç—É—Ä–µ: {len(corner_vertices)}")

    corners_in_area = []
    for v in corner_vertices:
        x = v.get('x', 0) * SCALE_FACTOR
        y = v.get('y', 0) * SCALE_FACTOR

        if WINDOW1_X_MIN <= x <= WINDOW1_X_MAX and WINDOW1_Y_MIN <= y <= WINDOW1_Y_MAX:
            corners_in_area.append(v)
            print(f"\n    ‚úì J{v.get('junction_id')} (corner={v.get('corner')})")
            print(f"      –ü–æ–∑–∏—Ü–∏—è: ({x:.3f}, {y:.3f})")
            print(f"      –¢–∏–ø: {v.get('junction_type')}")

    if len(corners_in_area) == 0:
        print(f"\n  ‚úÖ –ù–ï–¢ —É–≥–ª–æ–≤—ã—Ö –≤–µ—Ä—à–∏–Ω –≤ –æ–±–ª–∞—Å—Ç–∏ window_1 - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print(f"     –°—Ç–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º.")
    else:
        print(f"\n  ‚ö†Ô∏è  {len(corners_in_area)} —É–≥–ª–æ–≤—ã—Ö –≤–µ—Ä—à–∏–Ω –≤ –æ–±–ª–∞—Å—Ç–∏ window_1!")
        print(f"     –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –õ–ò–®–ù–ò–• –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Å—Ç–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä–∏–º junction-based —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
    print(f"\nüîç Junction-based —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ window_1:")

    junction_segs_in_area = []
    for seg in data.get('wall_segments_from_junctions', []):
        seg_bbox = seg.get('bbox', {})
        if not seg_bbox:
            continue

        x = seg_bbox.get('x', 0) * SCALE_FACTOR
        y = seg_bbox.get('y', 0) * SCALE_FACTOR
        w = seg_bbox.get('width', 0) * SCALE_FACTOR
        h = seg_bbox.get('height', 0) * SCALE_FACTOR

        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        seg_x_min = x
        seg_x_max = x + w
        seg_y_min = y
        seg_y_max = y + h

        x_overlap = (seg_x_min <= WINDOW1_X_MAX) and (seg_x_max >= WINDOW1_X_MIN)
        y_overlap = (seg_y_min <= WINDOW1_Y_MAX) and (seg_y_max >= WINDOW1_Y_MIN)

        if x_overlap and y_overlap:
            junction_segs_in_area.append(seg)
            print(f"\n    {seg.get('segment_id')}")
            print(f"      Junctions: {seg.get('start_junction_id')} ‚Üí {seg.get('end_junction_id')}")
            print(f"      Bbox: x={x:.3f}-{x+w:.3f}, y={y:.3f}-{y+h:.3f}")
            print(f"      –†–∞–∑–º–µ—Ä: {w:.3f} x {h:.3f}")

    print(f"\n  –ù–∞–π–¥–µ–Ω–æ junction-based —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(junction_segs_in_area)}")

    # –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
    print(f"\n" + "=" * 70)
    print("–ò–¢–û–ì:")
    print("=" * 70)

    total_wall_elements = len(window_1_segments) + len(corners_in_area) + len(junction_segs_in_area)
    print(f"  –°–µ–≥–º–µ–Ω—Ç–æ–≤ –æ—Ç window_1: {len(window_1_segments)} (–ª–µ–≤—ã–π + –ø—Ä–∞–≤—ã–π)")
    print(f"  –£–≥–ª–æ–≤—ã—Ö –≤–µ—Ä—à–∏–Ω –≤ –æ–±–ª–∞—Å—Ç–∏: {len(corners_in_area)}")
    print(f"  Junction —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏: {len(junction_segs_in_area)}")
    print(f"  –ò–¢–û–ì–û —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç–µ–Ω: {total_wall_elements}")

    if len(corners_in_area) > 0:
        print(f"\nüî¥ –ü–†–û–ë–õ–ï–ú–ê: –£–≥–ª–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã –≤ –æ–±–ª–∞—Å—Ç–∏ window_1!")
        print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º create_rectangles —Å—Ç—Ä–æ–∏—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –º–µ–∂–¥—É")
        print(f"   —Å–æ—Å–µ–¥–Ω–∏–º–∏ —É–≥–ª–∞–º–∏, —á—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ü–ï–†–ï–ö–†–´–í–ê–Æ–©–ò–ï–°–Ø —Å—Ç–µ–Ω—ã!")
        print(f"\n   –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è, —á—Ç–æ–±—ã")
        print(f"   –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è")
        print(f"   —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –æ—Ç openings.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        json_path = "blender/2_wall_coordinates_inverted.json"
    else:
        json_path = sys.argv[1]

    analyze_json_structure(json_path)
